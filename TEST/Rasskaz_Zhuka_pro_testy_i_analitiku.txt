Доброе утро, Арсений Сергеевич.
У меня несколько вопросов касательно командной разработки:
1) -
2) -
3) можете перечислить те итоговые продукты, которые должен сделать аналитик? Из того, что я помню: техническое задание, документация проекта, документация по коду, юзер кейсы. Что-то ещё?
4) аналогично, можете перечислить то, что должен сделать отдел тестирования? Автотесты обязательны?

3) 
- Сформировать Usecase, 
- набор действий пользователя, 
- родить из него набор задач (условно эпиков или userstory, можно называть как удобно) включая 
   анализ(требования+figma), 
   теханализ(swagger+sequence клиент-сервер), 
   разработку(возможно бить на задачи для компонентов, возможно, нет, как вам комфортнее будет работать), 
   тестирование(автотесты+примерный набор ручных тестов), 
   внедрение - деплой на сервер. 
Продукты аналитика - usecase, система задач совместно с лидом,  итоговое описание продукта, краткое, схемы компонентов. 
схемы er и краткое описание API сервисов/сервиса, может делать не он, отвечает он. 
Внутри задач - требования, краткие показательные sequence. Проведение главных двух трех ручных тест кейсов. 


4) автотесты обязательны, обязательно их проведение. Ручные тест кейсы должны быть хотя бы краткие на основе требований на положительные и альтернативные кейсы, негативные исключительные вряд ли успеете. 5) обращаю внимание, пытаемся в agile, то есть не публиковать всё в последний момент, а спустя 2-4 недели первые рабочие куски должны  быть опубликованы и запущены. Дальше накидываем туда функционал. 6) подзадачи внутри эпика могут быть построены как удобно по проекту, но там должна быть аналитика, теханализ, разработка, тестирование, деплой, чтобы можно было увидеть, что вот он писал требования, она рисовала GUI, он писал серверную часть, они вдвоём рисовали сиквенсы, этот писал автотесты и гонял, вот он всё деплоил. Чтобы по этим задачам можно было отследить, кто что сделал, кто что делает и кто что будет делать в условные 2 недели наперёд.
в 3) - не написать тест кейсы, а по готовности их прогнать, посмотреть, что всё ок, как и задумывалось, в вашем случае, видимо будет скорректировать требования и кейсы по тому как написали прогу))))
Не обязательно подробно все писать, понятно и ничего не забыть хотя бы в двух словах.
Надеюсь понятно описал, будут вопросы, спрашивай)
